/* Generated By:JJTree&JavaCC: Do not edit this line. ADTParserTokenManager.java */
package adtool.adtree;

import java.io.StringReader;
import java.io.Reader;

/** Token Manager. */
public class ADTParserTokenManager implements ADTParserConstants {

	/** Debug output. */
	public static java.io.PrintStream debugStream = System.out;

	/** Set debug output. */
	public static void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private static final int jjStopStringLiteralDfa_0(int pos, long active0) {
		switch (pos) {
		default:
			return -1;
		}
	}

	private static final int jjStartNfa_0(int pos, long active0) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}

	static private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	static private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 40:
			return jjStopAtPos(0, 12);
		case 41:
			return jjStopAtPos(0, 13);
		case 44:
			return jjStopAtPos(0, 11);
		default:
			return jjMoveNfa_0(0, 0);
		}
	}

	static private int jjMoveNfa_0(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 21;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0xffffecfe00000000L & l) == 0L)
							break;
						if (kind > 14)
							kind = 14;
						jjCheckNAddTwoStates(1, 2);
						break;
					case 1:
						if ((0xffffecff00000400L & l) != 0L)
							jjCheckNAddTwoStates(1, 2);
						break;
					case 2:
						if ((0xffffecfe00000000L & l) != 0L && kind > 14)
							kind = 14;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0x7fffffffffffffffL & l) != 0L) {
							if (kind > 14)
								kind = 14;
							jjCheckNAddTwoStates(1, 2);
						}
						if (curChar == 67)
							jjAddStates(0, 1);
						else if (curChar == 99)
							jjAddStates(2, 3);
						else if (curChar == 65)
							jjAddStates(4, 5);
						else if (curChar == 97)
							jjAddStates(6, 7);
						else if (curChar == 79)
							jjAddStates(8, 9);
						else if (curChar == 111)
							jjAddStates(10, 11);
						break;
					case 1:
						if ((0x7fffffffffffffffL & l) != 0L)
							jjCheckNAddTwoStates(1, 2);
						break;
					case 2:
						if ((0x7fffffffffffffffL & l) != 0L && kind > 14)
							kind = 14;
						break;
					case 3:
						if (curChar == 111)
							jjAddStates(10, 11);
						break;
					case 4:
						if (curChar == 111 && kind > 5)
							kind = 5;
						break;
					case 5:
						if (curChar == 112 && kind > 7)
							kind = 7;
						break;
					case 6:
						if (curChar == 79)
							jjAddStates(8, 9);
						break;
					case 7:
						if (curChar == 79 && kind > 5)
							kind = 5;
						break;
					case 8:
						if (curChar == 80 && kind > 7)
							kind = 7;
						break;
					case 9:
						if (curChar == 97)
							jjAddStates(6, 7);
						break;
					case 10:
						if (curChar == 111 && kind > 6)
							kind = 6;
						break;
					case 11:
						if (curChar == 112 && kind > 8)
							kind = 8;
						break;
					case 12:
						if (curChar == 65)
							jjAddStates(4, 5);
						break;
					case 13:
						if (curChar == 79 && kind > 6)
							kind = 6;
						break;
					case 14:
						if (curChar == 80 && kind > 8)
							kind = 8;
						break;
					case 15:
						if (curChar == 99)
							jjAddStates(2, 3);
						break;
					case 16:
						if (curChar == 111 && kind > 9)
							kind = 9;
						break;
					case 17:
						if (curChar == 112 && kind > 10)
							kind = 10;
						break;
					case 18:
						if (curChar == 67)
							jjAddStates(0, 1);
						break;
					case 19:
						if (curChar == 79 && kind > 9)
							kind = 9;
						break;
					case 20:
						if (curChar == 80 && kind > 10)
							kind = 10;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = { 19, 20, 16, 17, 13, 14, 10, 11, 7, 8, 4, 5, };

	/** Token literal values. */
	public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null, null, null, null, null,
			"\54", "\50", "\51", null, null, null, null, null, null, };

	/** Lexer state names. */
	public static final String[] lexStateNames = { "DEFAULT", };
	static final long[] jjtoToken = { 0x7fe1L, };
	static final long[] jjtoSkip = { 0x1eL, };
	static protected SimpleCharStream input_stream;
	static private final int[] jjrounds = new int[21];
	static private final int[] jjstateSet = new int[42];
	static protected char curChar;

	/** Constructor. */
	public ADTParserTokenManager(SimpleCharStream stream) {
		if (input_stream != null)
			throw new TokenMgrError(
					"ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
					TokenMgrError.STATIC_LEXER_ERROR);
		input_stream = stream;
	}

	/** Constructor. */
	public ADTParserTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	/** Reinitialise parser. */
	static public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	static private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 21; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	/** Reinitialise parser. */
	static public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Switch to specified lex state. */
	static public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	static protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? input_stream.GetImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind, curTokenImage);

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	static int curLexState = 0;
	static int defaultLexState = 0;
	static int jjnewStateCnt;
	static int jjround;
	static int jjmatchedPos;
	static int jjmatchedKind;

	/** Get the next Token. */
	public static Token getNextToken() {
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			try {
				input_stream.backup(0);
				while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
					curChar = input_stream.BeginToken();
			} catch (java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos)
					input_stream.backup(curPos - jjmatchedPos - 1);
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

	static private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	static private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	static private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

}
